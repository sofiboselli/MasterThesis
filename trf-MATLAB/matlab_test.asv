clc
clear all
close all

load ExJobb\X.mat;
%%
load ExJobb\mas.mat;
load ExJobb\att.mat;

%%
id = 1;
n = 1;

sp_size = size(sound_attended);
eeg = data(id:id*4,:,:,:);
%%

eeg = permute(eeg,[2 1 3 4]);
eeg_size = size(eeg);

%%
sa = sound_attended';
sm = sound_masker';
sa = sa(:);
sm = sm(:);

eeg = reshape(eeg,[ eeg_size(1)*eeg_size(2), eeg_size(3) eeg_size(4)]);
eeg = permute(eeg,[3 2 1]);

%%

attended = [];
masker = [];

for i = id:id*4*20
    attended =  [attended; resample_envelope(sa{i})'];
    masker = [masker; resample_envelope(sm{i})'];
end


%%
nr_samples = eeg_size(1);
nr_train = floor(nr_samples*0.8);
nr_val = floor(nr_samples*0.2);

%%
% [b,a] = butter(3,[0.5 15]/128*2);
% eeg_ds = filter(b,a,eeg);
eeg_ds = eeg;
eeg_ds = nt_dsample(eeg_ds,256/128);

%%
eeg_norm = normalize(eeg_ds,3);
% for j = 1:80
%     r = eeg_ds(:,:,j);
%     eeg_ds(:,:,j) = eeg_ds(:,:,j)/std(r(:));
% end

%att_norm = normalize(attended',2);
%mas_norm = normalize(masker',2);
%att_norm = att_norm';

att_norm = attended';
mas_norm = masker';

resp = nt_mat2trial(eeg_norm)';
stim = num2cell(att_norm, 1)';
stim2 = num2cell(mas_norm,1)';

cv = cvpartition(size(resp,1),'HoldOut',0.2);
idx = cv.test;
% Separate to training and test data
resptrain = resp(~idx,:);
resptest  = resp(idx,:);


for i = 1:length(stim)
    stim{i} = stim{i}';
    stim2{i} = stim2{i}';
end

stimtrain = stim(~idx,:);
stimtest  = stim(idx,:);

mastrain = stim2(~idx,:);
mastest = stim2(idx,:);

%%
Dir = -1; % direction of causality
tmin = -20; % minimum time lag  -0.3
tmax =  550; % maximum time lag  0.1
lambdas = logspace(1,8,20); % regularization values  0.3

% rmax = -inf;
% for j = 1:20
%     ts = logspace(2,3.3,20);
%     cv = mTRFcrossval(stimtrain,resptrain,64,Dir,tmin,ts(j),100000,'zeropad',0);
%     if mean(max(cv.r))>rmax
%         tbest = ts(j);
%     end
% end

cv = mTRFcrossval(stimtrain,resptrain,64,Dir,tmin,tmax,lambdas,'zeropad',0,'fast',1);

%%

[rmax,idx] = max(mean(cv.r));
lambda = lambdas(idx);
nlambda = length(lambdas);
%%

model = mTRFtrain(stimtrain,resptrain,64,Dir,tmin,tmax,8000,'zeropad',0);
%%
train_accuracy = ppredict(model,stimtrain,resptrain,mastrain)
test_accuracy = ppredict(model,stimtest,resptest,mastest)

%%
total = 0;
for i = 1:length(pred)
    mas_pred = corr(mastrain(i,:)',pred{i},'type','Pearson');
    att_pred = corr(stimtrain{i},pred{i},'type','Pearson');
    if att_pred>mas_pred
        total= total+1;
    end
end
total = total
percentage = total/length(pred)*100

%%

figure('Name','Stimulus Reconstruction','NumberTitle','off')
set(gcf,'color','w')
subplot(2,2,1)
errorbar(1:nlambda,mean(st1.r),std(st1.r)/sqrt(nfold-1),'linewidth',2)
set(gca,'xtick',1:nlambda,'xticklabel',-6:2:6), xlim([0,nlambda+1])
title('CV Accuracy')
xlabel('Regularization (1\times10^\lambda)')
ylabel('Correlation')
axis square, grid on

% Plot CV error
subplot(2,2,2)
errorbar(1:nlambda,mean(st1.err),std(st1.err)/sqrt(nfold-1),'linewidth',2)
set(gca,'xtick',1:nlambda,'xticklabel',-6:2:6), xlim([0,nlambda+1])
title('CV Error')
xlabel('Regularization (1\times10^\lambda)')
ylabel('MSE')
axis square, grid on

% Plot reconstruction
subplot(2,2,3)
plot((1:length(stimtest{3}))/fs,stimtest{3},'linewidth',2)
hold on
plot((1:length(pred{3}))/fs,pred{3},'linewidth',2)
hold off
xlim([0,10])
title('Reconstruction')
xlabel('Time (s)')
ylabel('Amplitude (a.u.)')
axis square, grid on
legend('Orig','Pred')

% Plot test correlation
subplot(2,2,4)
bar(1,rmax), hold on
bar(2,stats.r), hold off
xlim([0,3])
set(gca,'xtick',1:2,'xticklabel',{'Val.','Test'})
title('Model Performance')
xlabel('Dataset')
ylabel('Correlation')
axis square, grid on

